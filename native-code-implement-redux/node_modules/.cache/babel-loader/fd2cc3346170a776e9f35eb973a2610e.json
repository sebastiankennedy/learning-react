{"ast":null,"code":"const reducers = {\n  todos(state, action) {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case 'set':\n        return payload;\n\n      case 'add':\n        return [...state, payload];\n\n      case 'remove':\n        return odos.filter(todo => {\n          return todo.id !== payload;\n        });\n\n      case 'toggle':\n        return state.map(todo => {\n          return todo.id === payload ? { ...todo,\n            complete: !todo.complete\n          } : todo;\n        });\n    }\n\n    return state;\n  },\n\n  incrementCount(state, action) {\n    const {\n      type\n    } = action;\n\n    switch (type) {\n      case 'set':\n      case 'add':\n        return state + 1;\n    }\n\n    return state;\n  }\n\n};\n\nfunction combineReducers(reducers) {\n  const changed = {}; // state 代表全局状态\n\n  return function reducer(state, action) {\n    for (let key in reducer) {\n      // 根据数据字段进行单独更新\n      changed[key] = reducers[key](state[key], action);\n    }\n\n    return { ...state,\n      ...changed\n    };\n  };\n}\n\nexport default combineReducers(reducers);","map":{"version":3,"sources":["/Users/sebastian/Code/Study/learning-react/native-code-implement-redux/src/reducers.js"],"names":["reducers","todos","state","action","type","payload","odos","filter","todo","id","map","complete","incrementCount","combineReducers","changed","reducer","key"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;AACbC,EAAAA,KAAK,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACjB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,MAA1B;;AAEA,YAAQC,IAAR;AACI,WAAK,KAAL;AACI,eAAOC,OAAP;;AACJ,WAAK,KAAL;AACI,eAAO,CAAC,GAAGH,KAAJ,EAAWG,OAAX,CAAP;;AACJ,WAAK,QAAL;AACI,eAAOC,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAI;AACvB,iBAAOA,IAAI,CAACC,EAAL,KAAYJ,OAAnB;AACH,SAFM,CAAP;;AAGJ,WAAK,QAAL;AACI,eAAOH,KAAK,CAACQ,GAAN,CAAUF,IAAI,IAAI;AACrB,iBAAOA,IAAI,CAACC,EAAL,KAAYJ,OAAZ,GACD,EACE,GAAGG,IADL;AAEEG,YAAAA,QAAQ,EAAE,CAACH,IAAI,CAACG;AAFlB,WADC,GAKDH,IALN;AAMH,SAPM,CAAP;AAVR;;AAmBA,WAAON,KAAP;AACH,GAxBY;;AAyBbU,EAAAA,cAAc,CAACV,KAAD,EAAQC,MAAR,EAAgB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,MAAjB;;AAEA,YAAQC,IAAR;AACI,WAAK,KAAL;AACA,WAAK,KAAL;AACI,eAAOF,KAAK,GAAG,CAAf;AAHR;;AAMA,WAAOA,KAAP;AACH;;AAnCY,CAAjB;;AAsCA,SAASW,eAAT,CAAyBb,QAAzB,EAAmC;AAC/B,QAAMc,OAAO,GAAG,EAAhB,CAD+B,CAE/B;;AACA,SAAO,SAASC,OAAT,CAAiBb,KAAjB,EAAwBC,MAAxB,EAAgC;AACnC,SAAK,IAAIa,GAAT,IAAgBD,OAAhB,EAAyB;AACrB;AACAD,MAAAA,OAAO,CAACE,GAAD,CAAP,GAAehB,QAAQ,CAACgB,GAAD,CAAR,CAAcd,KAAK,CAACc,GAAD,CAAnB,EAA0Bb,MAA1B,CAAf;AACH;;AAED,WAAO,EACH,GAAGD,KADA;AAEH,SAAGY;AAFA,KAAP;AAIH,GAVD;AAWH;;AAED,eAAeD,eAAe,CAACb,QAAD,CAA9B","sourcesContent":["const reducers = {\n    todos(state, action) {\n        const { type, payload } = action;\n\n        switch (type) {\n            case 'set':\n                return payload\n            case 'add':\n                return [...state, payload]\n            case 'remove':\n                return odos.filter(todo => {\n                    return todo.id !== payload\n                })\n            case 'toggle':\n                return state.map(todo => {\n                    return todo.id === payload\n                        ? {\n                            ...todo,\n                            complete: !todo.complete\n                        }\n                        : todo\n                })\n        }\n        return state\n    },\n    incrementCount(state, action) {\n        const { type } = action;\n\n        switch (type) {\n            case 'set':\n            case 'add':\n                return state + 1;\n        }\n\n        return state;\n    }\n}\n\nfunction combineReducers(reducers) {\n    const changed = {}\n    // state 代表全局状态\n    return function reducer(state, action) {\n        for (let key in reducer) {\n            // 根据数据字段进行单独更新\n            changed[key] = reducers[key](state[key], action);\n        }\n\n        return {\n            ...state,\n            ...changed\n        }\n    }\n}\n\nexport default combineReducers(reducers);"]},"metadata":{},"sourceType":"module"}